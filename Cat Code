/* *
 * This sample demonstrates handling intents from an Alexa skill using the Alexa Skills Kit SDK (v2).
 * Please visit https://alexa.design/cookbook for additional examples on implementing slots, dialog management,
 * session persistence, api calls, and more.
 * */
const Alexa = require('ask-sdk-core');

const LaunchRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'LaunchRequest';
    },
    handle(handlerInput) {
        const speakOutput = '<speak> <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_purr_02"/> </speak>';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

var lastnumberfound = -1;
var valuetotest = 0;



const catchAllIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'catchAllIntent';
    },
    handle(handlerInput) {
        //const speakOutput = 'Miauw';
        //var catSpeak = '<speak> This is Alexa\'s regular speech, followed by the sound effect named Bear Groan Roar (1). <audio src="soundbank://soundlibrary/animals/amzn_sfx_bear_groan_roar_01"/> </speak>';
        const sound1 = '<speak> <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_meow_1x_01"/> </speak>';
        const sound2 = '<speak> <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_meow_1x_02"/> </speak>';
        const sound3 = '<speak> <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_long_meow_1x_01"/> </speak>';
        const sound4 = '<speak> <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_purr_02"/> </speak>';
        const sound5 = '<speak> <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_purr_meow_01"/> </speak>';
        
        const sounds= [sound1,sound2,sound3,sound4,sound5];
        
    do {
        valuetotest = getRandomInt (0,sounds.length);
    }while (valuetotest == lastnumberfound)
    
    lastnumberfound = valuetotest;
    
        var randomSound = sounds[valuetotest]; //code to not repeat the last sound twice

        return handlerInput.responseBuilder
            //.speak(speakOutput)
            .speak(randomSound)
            .reprompt()
            .getResponse();
    }
};


function getRandomInt(min, max) {
    
    return Math.floor(Math.random() * (max - min) + min);
}

const HelpIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.HelpIntent';
    },
    handle(handlerInput) {
        const speakOutput = 'Meow Meow';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

const CancelAndStopIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && (Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.CancelIntent'
                || Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.StopIntent');
    },
    handle(handlerInput) {
        const speakOutput = '<speak> <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_long_meow_1x_01"/> </speak>';

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .getResponse();
    }
};
/* *
 * FallbackIntent triggers when a customer says something that doesnâ€™t map to any intents in your skill
 * It must also be defined in the language model (if the locale supports it)
 * This handler can be safely added but will be ingnored in locales that do not support it yet 
 * */
const FallbackIntentHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest'
            && Alexa.getIntentName(handlerInput.requestEnvelope) === 'AMAZON.FallbackIntent';
    },
    handle(handlerInput) {
        //const speakOutput = 'Meow Meow Meow';
        //const speakOutput = '<speak> <audio src="https://bigsoundbank.com/UPLOAD/mp3/0494.mp3"/> </speak>';
        const speakOutput = '<speak> <audio src="soundbank://soundlibrary/animals/amzn_sfx_cat_purr_meow_01"/> </speak>';
        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};
/* *
 * SessionEndedRequest notifies that a session was ended. This handler will be triggered when a currently open 
 * session is closed for one of the following reasons: 1) The user says "exit" or "quit". 2) The user does not 
 * respond or says something that does not match an intent defined in your voice model. 3) An error occurs 
 * */
const SessionEndedRequestHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'SessionEndedRequest';
    },
    handle(handlerInput) {
        console.log(`~~~~ Session ended: ${JSON.stringify(handlerInput.requestEnvelope)}`);
        // Any cleanup logic goes here.
        return handlerInput.responseBuilder.getResponse(); // notice we send an empty response
    }
};
/* *
 * The intent reflector is used for interaction model testing and debugging.
 * It will simply repeat the intent the user said. You can create custom handlers for your intents 
 * by defining them above, then also adding them to the request handler chain below 
 * */
const IntentReflectorHandler = {
    canHandle(handlerInput) {
        return Alexa.getRequestType(handlerInput.requestEnvelope) === 'IntentRequest';
    },
    handle(handlerInput) {
        const intentName = Alexa.getIntentName(handlerInput.requestEnvelope);
        const speakOutput = `You just triggered ${intentName}`;

        return handlerInput.responseBuilder
            .speak(speakOutput)
            //.reprompt('add a reprompt if you want to keep the session open for the user to respond')
            .getResponse();
    }
};
/**
 * Generic error handling to capture any syntax or routing errors. If you receive an error
 * stating the request handler chain is not found, you have not implemented a handler for
 * the intent being invoked or included it in the skill builder below 
 * */
const ErrorHandler = {
    canHandle() {
        return true;
    },
    handle(handlerInput, error) {
        const speakOutput = 'Sorry, I had trouble doing what you asked. Please try again.';
        console.log(`~~~~ Error handled: ${JSON.stringify(error)}`);

        return handlerInput.responseBuilder
            .speak(speakOutput)
            .reprompt(speakOutput)
            .getResponse();
    }
};

/**
 * This handler acts as the entry point for your skill, routing all request and response
 * payloads to the handlers above. Make sure any new handlers or interceptors you've
 * defined are included below. The order matters - they're processed top to bottom 
 * */
exports.handler = Alexa.SkillBuilders.custom()
    .addRequestHandlers(
        LaunchRequestHandler,
        catchAllIntentHandler,
        HelpIntentHandler,
        CancelAndStopIntentHandler,
        FallbackIntentHandler,
        SessionEndedRequestHandler,
        IntentReflectorHandler)
    .addErrorHandlers(
        ErrorHandler)
    .withCustomUserAgent('sample/hello-world/v1.2')
    .lambda();
